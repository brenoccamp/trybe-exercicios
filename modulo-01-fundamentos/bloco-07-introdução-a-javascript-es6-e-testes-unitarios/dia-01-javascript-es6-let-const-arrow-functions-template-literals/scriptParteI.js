// Parte I
// Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o.
// Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// Modifique as concatena√ß√µes para template literals .
// const testingScope = (escopo) => {
//   if (escopo === true) {
//     let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)!';
//     ifScope = `${ifScope} √ìtimo, fui utilizada no escopo !`;
//     console.log(`${ifScope} √ìtimo, fui utilizada no escopo!`);
//   } else {
//     const elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';
//     console.log(elseScope);
//   }
// }

// testingScope(true);


// Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
// Copie o c√≥digo abaixo.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// Seu c√≥digo aqui.

// console.log(`Os numeros ${oddsAndEvens.sort((a, b) => a - b)} se encontram ordenados de forma crescente!`);

// const sortOddsAndEvens = (array) => {
//   const sortArray = array.sort((a, b) => a - b);
//   return sortArray;
// }
// const sortedArray = sortOddsAndEvens(oddsAndEvens);
// console.log(`Os n√∫meros ${sortedArray} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ


// Parte II
// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let , const , arrow functions , template literals e ternary operator .
// 1 - Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! , √© o produto de todos os inteiros menores ou iguais a N . Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva . Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator .
// const factorial = number => {
//   let numberFactored = 1;
//   for (let index = 2; index <= number; index += 1) {
//     numberFactored *= index;
//   }
//   return numberFactored;
// }
// console.log(factorial(6));
// console.log(factorial(5))
// const factorialWithTernary = number => number > 1 ? number * factorialWithTernary(number - 1) : 1;
// console.log(factorial(5))


// 2 - Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.
// Exemplo: longestWord("Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu") // retorna 'aconteceu'
// RESOLU√á√ÉO EM UMA LINHA.
// const longestWord = string => string.split(' ').sort((wordA, wordB) => wordB.length - wordA.length)[0]; 

// const longestWord = phrase => {
//   let splitedPhrase = phrase.split(' ');
//   let wordLength = 0;
//   let biggestWord = '';
//   for (const word of splitedPhrase) {
//     if (word.length > wordLength) {
//       wordLength = word.length;
//       biggestWord = word;
//     }
//   }
//   return biggestWord;
// }
// console.log(longestWord("Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu"));

// 3 - Crie uma p√°gina que contenha:
// Um bot√£o ao qual ser√° associado um event listener ;
// Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
// Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.

// const getClick = document.getElementById('clicks');
// let clickCount = 0;
// const getButton = document.getElementById('botao').addEventListener('click', () => getClick.innerHTML = clickCount += 1);


// 4 - Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1 : Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ determinar e substituir pela string que voc√™ passou como par√¢metro. Sua fun√ß√£o deve retornar essa nova string .
// Exemplo:
// String determinada: "Tryber x aqui!"
// Par√¢metro: "Bebeto"
// Retorno: "Tryber Bebeto aqui!"
// Um array com escopo global, que √© o escopo do arquivo JS , nesse caso, contendo cinco strings com suas principais skills .
// Fun√ß√£o 2 : Escreva uma fun√ß√£o que vai receber a string retornada da Fun√ß√£o 1 como par√¢metro. Essa fun√ß√£o deve concatenar as skills do array global √† string que foi passada para a Fun√ß√£o 2 via par√¢metro. Voc√™ deve ordenar os skills em ordem alfab√©tica. Sua fun√ß√£o deve retornar essa nova string .
// Exemplo: "Tryber x aqui! Minhas cinco principais habilidades s√£o:
// JavaScript;
// HTML; ... #goTrybe".

// const array = ['JS', 'CSS', 'HTML5'];
// function buildSkillsPhrase (paramOne) {
//   const fun1 = paramInner => (
//     `Tryber ${paramInner} aqui!
//     Tudo bem?`
//   );
//   let result = `${fun1(paramOne)}
//   Minhas principais habilidades s√£o:`;
//   array.forEach((skill, index) => 
//   result = `${result} - ${[skill]}`);
//   result = `${result}
//   #gotrybe`;
//   return result;
// }
// console.log(buildSkillsPhrase('Lucas'));